{"version":3,"sources":["components/ConfigState.js","data/config-state.js","routes/Config.js","data/state.js","routes/Dashboard.js","components/MicroTask.js","components/WorkerState.js","data/worker-state.js","routes/WorkerUI.js","Config.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["ConfigState","_ref","_this","state","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","react_default","a","createElement","Fragment","CssBaseline","JSONPretty_default","className","theme","JSONPrettyMon","data","React","Component","STATE_PROPS_QUERY","STATE_QUERY","gql","_templateObject","STATE_SUBSCRIPTION","_templateObject2","ConfigStateData","didSubscribe","subscribeToMore","document","variables","updateQuery","prev","subscriptionData","assign","configState","_this2","react_apollo_esm","query","_ref2","loading","error","_subscribeToState","setState","components_ConfigState","Dashboard","Container","maxWidth","Typography","variant","config_state","subscribeToState","state_templateObject","state_templateObject2","CurrentState","currentState","data_state","SUBMIT_TASK_MUTATION","MicroTask_templateObject","MicroTask","workerId","task","file","fileUrl","submitted","_ref2$target","target","validity","slicedToArray","files","valid","URL","createObjectURL","e","preventDefault","taskString","JSON","stringify","taskResultString","taskResult","props","client","mutate","mutation","update","content","_this3","resultType","onSubmit","submitResult","apply","arguments","type","required","onChange","handleFileChange","src","alt","Button","color","FormControl","component","FormLabel","RadioGroup","aria-label","name","handleBooleanChange","FormControlLabel","value","control","Radio","label","interfaceType","taskType","interfaceParams","withApollo","WorkerState","workerState","nextProps","currentTask","components_MicroTask","REGISTER_WORKER_QUERY","worker_state_templateObject","worker_state_templateObject2","_templateObject3","WorkerStateData","isRegistering","didRegister","registerWorker","then","_ref3","profile","id","_ref4","components_WorkerState","worker_state","require","process","API_URI","PUBLIC_URL","Config","Package","wsLink","WebSocketLink","uri","replace","options","reconnect","timeout","connectionParams","link","split","definition","getMainDefinition","console","log","operation","kind","createUploadLink","path","cache","InMemoryCache","ApolloClient","baseTheme","createMuiTheme","palette","App","login","logged","logout","toggleMenu","open","closeMenu","selectMenuItem","key","selectedMenuItem","createMenu","entries","menuItems","map","LinkComponent","forwardRef","ref","react_router_dom","innerRef","to","MenuItem","onClick","Worker UI","MuiThemeProvider","AppBar","position","Toolbar","IconButton","edge","Menu_default","Drawer","docked","onBackdropClick","logo","react_router","exact","ConfigRoute","WorkerUI","Boolean","window","location","hostname","match","ReactDOM","render","basename","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.4ea336e5.chunk.js","sourcesContent":["import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport PropTypes from 'prop-types';\nimport JSONPretty from 'react-json-pretty';\nimport * as  JSONPrettyMon from 'react-json-pretty/dist/1337';\n\nclass ConfigState extends React.Component {\n  static propTypes =  {\n    state: PropTypes.any\n  }\n\n  constructor({ state }) {\n    super();\n    // console.log('Making ConfigState:', state);\n    this.state = state;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      <JSONPretty className={\"json-pretty\"} theme={JSONPrettyMon} data={this.state}></JSONPretty>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default ConfigState;\n","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nimport ConfigState from '../components/ConfigState';\n\nconst STATE_PROPS_QUERY = `\n{\n  schemaFile\n  taskGenerationConfig {\n    initialLocation\n  }\n}`;\n\n\nconst STATE_QUERY = gql`\n  query ConfigState {\n    configState ${STATE_PROPS_QUERY}\n  }\n`;\n\nconst STATE_SUBSCRIPTION = gql`\n  subscription ConfigState {\n    configState ${STATE_PROPS_QUERY}\n  }\n`;\n\nclass ConfigStateData extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      didSubscribe: false\n    };\n  }\n\n  _subscribeToState(subscribeToMore) {\n    subscribeToMore({\n      document: STATE_SUBSCRIPTION,\n      variables: { },\n      updateQuery: (prev, { subscriptionData }) => {\n        // debugger;\n        const res = Object.assign({}, { configState: subscriptionData.data });\n        // this.setState();\n        return res;\n      }\n    })\n  }\n\n  render() {\n    return <span>\n      {<Query\n        query={STATE_QUERY}\n        variables={{  }}\n        >\n\n        {({ loading, error, data, subscribeToMore }) => {\n          if (loading) return <div>Fetching</div>;\n          if (error) return <div>Error</div>;\n\n          if (!this.state.didSubscribe) {\n            this._subscribeToState(subscribeToMore);\n            this.setState({ didSubscribe: true });\n          }\n          // this.setState({ currentState: data.currentState });\n\n          // console.log('Subscribe:', data);\n\n          return <ConfigState state={data.configState} />;\n          // data.currentState\n        }}\n\n        </Query>\n      }\n\n    </span>;\n  }\n}\n\nexport default ConfigStateData;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport ConfigStateData from '../data/config-state';\n\nclass Dashboard extends React.Component {\n  // componentDidMount() {\n  //   this._subscribeToState();\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n      <Typography variant=\"h6\" className=\"TitleBar\">\n      Config\n      </Typography>\n\n      <ConfigStateData subscribeToState={this._subscribeToState} />\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nimport JSONPretty from 'react-json-pretty';\nimport * as  JSONPrettyMon from 'react-json-pretty/dist/1337';\n\nconst STATE_PROPS_QUERY = `\n{\n  currentTime\n  config {\n    schemaFile\n    taskGenerationConfig {\n      initialLocation\n    }\n  }\n\n  crowd {\n    stats {\n      seenWorkersTotal\n      availableWorkersTotal\n    }\n  }\n\n  tasks {\n    stats {\n      availableTasksTotal\n    }\n  }\n\n  knowledge {\n    stats {\n      totalEntityTypes\n    }\n    knownClasses\n  }\n\n}`;\n\nconst STATE_QUERY = gql`\n  query State {\n    currentState ${STATE_PROPS_QUERY}\n  }\n`;\n\nconst STATE_SUBSCRIPTION = gql`\n  subscription State {\n    currentState ${STATE_PROPS_QUERY}\n  }\n`;\n\nclass CurrentState extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      didSubscribe: false\n    };\n  }\n\n  _subscribeToState(subscribeToMore) {\n    subscribeToMore({\n      document: STATE_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        // debugger;\n        const res = Object.assign({}, subscriptionData.data);\n        // this.setState();\n        return res;\n      }\n    })\n  }\n\n  render() {\n    return <Query\n      query={STATE_QUERY}\n      variables={{}}\n    >\n\n    {({ loading, error, data, subscribeToMore }) => {\n      if (loading) return <div>Fetching</div>;\n      if (error) return <div>Error</div>;\n\n      if (!this.state.didSubscribe) {\n        this._subscribeToState(subscribeToMore);\n        this.setState({ didSubscribe: true });\n      }\n      // this.setState({ currentState: data.currentState });\n\n      return <JSONPretty className={\"json-pretty\"} theme={JSONPrettyMon} data={data.currentState}></JSONPretty>;\n      // data.currentState\n    }}\n\n    </Query>;\n  }\n}\n\nexport default CurrentState;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport CurrentState from '../data/state';\n\nclass Dashboard extends React.Component {\n  // componentDidMount() {\n  //   this._subscribeToState();\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n      <Typography variant=\"h6\" className=\"TitleBar\">\n      Dashboard\n      </Typography>\n\n      <CurrentState subscribeToState={this._subscribeToState} />\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\nimport FormControl from '@material-ui/core/FormControl';\nimport FormLabel from '@material-ui/core/FormLabel';\nimport Radio from '@material-ui/core/Radio';\nimport RadioGroup from '@material-ui/core/RadioGroup';\n\nimport { Button } from '@material-ui/core';\nimport { withApollo } from 'react-apollo';\nimport gql from \"graphql-tag\";\n\nconst SUBMIT_TASK_MUTATION = gql`\n  mutation TaskResult($workerId: ID!, $taskString: String!, $taskResultString: String!, $file: Upload) {\n    submitTaskResult(workerId: $workerId, taskString: $taskString, taskResultString: $taskResultString, file: $file) {\n      isSubmitted\n    }\n  }\n`;\n\nclass MicroTask extends React.Component {\n  static propTypes =  {\n    client: PropTypes.any,\n    task: PropTypes.any,\n    workerId: PropTypes.any\n  }\n\n  constructor({ workerId, task }) {\n    super();\n    // console.log('Making MicroTask:', task);\n    this.state = {\n      workerId,\n      task,\n      file: null,\n      fileUrl: null,\n      submitted: false,\n    }\n  }\n\n  handleFileChange({ target: { validity, files: [file] } }) {\n    // console.log('Handling file change:', validity, file);\n    if (validity.valid) {\n      this.setState({ file: file, fileUrl: URL.createObjectURL(file) });\n    }\n  }\n\n\n  submitResult(e) {\n    // console.log('Submitting result!');\n    e.preventDefault();\n\n    const taskString = JSON.stringify(this.state.task);\n    const taskResultString = JSON.stringify({ taskResult: \"test2\" });\n\n    // const file = new Blob([\"test content\"], { type: 'text/plain' });\n    // file.name = `test.txt`;\n\n    this.props.client.mutate({\n      mutation: SUBMIT_TASK_MUTATION,\n      variables: { workerId: this.state.workerId, taskString, taskResultString, file: this.state.file },\n      update: () => {\n        this.setState({ submitted: true});\n      }\n    });\n\n  }\n\n  handleBooleanChange() {\n    // setValue(event.target.value);\n  }\n\n\n  render() {\n    let content;\n    if (!this.state.submitted) {\n      if (this.state.task.resultType === \"IMAGE\") {\n        content = <form onSubmit={(...args) => this.submitResult(...args)}>\n        <input type=\"file\" required onChange={(...args) => this.handleFileChange(...args)} />\n        {this.state.fileUrl && <img src={this.state.fileUrl} className=\"imagePreview\" alt=\"file preview\" />}\n        <Button type=\"submit\" color=\"primary\" variant=\"contained\">Submit result!</Button>\n        </form>;\n\n      } else if (this.state.task.resultType === \"BOOLEAN\") {\n      const positive = \"is full\";\n      const negative = \"isn't full\";\n\n      content = <form onSubmit={(...args) => this.submitResult(...args)}>\n                  <FormControl component=\"fieldset\">\n                    <FormLabel component=\"legend\">Label</FormLabel>\n                    <RadioGroup\n                      aria-label=\"Label\"\n                      name=\"gender1\"\n                      onChange={(...args) => this.handleBooleanChange(...args)}\n                    >\n                      <FormControlLabel value={positive} control={<Radio />} label={positive} />\n                      <FormControlLabel value={negative} control={<Radio />} label={negative} />\n                    </RadioGroup>\n                  </FormControl>\n                  <Button type=\"submit\" color=\"primary\" variant=\"contained\">Submit result!</Button>\n                </form>;\n      }\n    } else {\n      content = <div>Task succesfully completed! Waiting for next task...</div>;\n    }\n\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      {this.state.task.interfaceType === \"QUESTION\" && <Typography variant=\"h5\" className=\"TaskQuestionInterface\">{this.state.task.taskType} Task: {this.state.task.interfaceParams[0]}</Typography>}\n\n      {content}\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApollo(MicroTask);\n\n// {<div>{this.state.task.interfaceType} interface: {JSON.stringify(this.state.task.interfaceParams)}.</div>}\n// {<div>{this.state.task.resultType} result: {JSON.stringify(this.state.task.resultParams)}.</div>}\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport PropTypes from 'prop-types';\nimport JSONPretty from 'react-json-pretty';\nimport * as  JSONPrettyMon from 'react-json-pretty/dist/1337';\n\nimport MicroTask from '../components/MicroTask';\n\nclass WorkerState extends React.Component {\n  static propTypes =  {\n    workerState: PropTypes.any,\n    workerId: PropTypes.any\n  }\n\n  constructor({ workerId, workerState }) {\n    super();\n    // console.log('Making WorkerState:', state);\n    this.state = {\n      workerId,\n      workerState\n    }\n  }\n\n  componentWillReceiveProps(nextProps){\n    // console.log(\"nextProps:\", nextProps)\n    if(nextProps.workerState && nextProps.workerState !== this.props.workerState){\n        this.setState({workerState: nextProps.workerState});\n    }\n  }\n\n  render() {\n    let content;\n    // console.log(this.state.workerState.currentTask);\n    if (this.state.workerState.currentTask == null) {\n      content = <div>Waiting for task to be assigned...</div>;\n    } else {\n      content = <MicroTask task={this.state.workerState.currentTask} workerId={this.state.workerId} />;\n    }\n\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      <JSONPretty className={\"json-pretty\"} theme={JSONPrettyMon} data={this.state.workerState}></JSONPretty>\n      {content}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default WorkerState;\n","import React from 'react';\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nimport WorkerState from '../components/WorkerState';\n\nconst STATE_PROPS_QUERY = `\n{\n  isOnline\n  isWorkingOnTask\n  currentTask {\n    taskType\n    taskParams\n    interfaceType\n    interfaceParams\n    resultType\n    resultParams\n  }\n}`;\n\nconst REGISTER_WORKER_QUERY = gql`\n  mutation Worker($name: String!) {\n    registerWorker(name: $name) {\n      profile {\n        id\n      }\n    }\n  }\n`;\n\nconst STATE_QUERY = gql`\n  query WorkerState($workerId: ID!) {\n    workerState(workerId: $workerId) ${STATE_PROPS_QUERY}\n  }\n`;\n\nconst STATE_SUBSCRIPTION = gql`\n  subscription WorkerState($workerId: ID!) {\n    workerState(workerId: $workerId) ${STATE_PROPS_QUERY}\n  }\n`;\n\nclass WorkerStateData extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      didSubscribe: false,\n      isRegistering: false,\n      didRegister: false,\n      workerId: null\n    };\n  }\n\n  _subscribeToState(subscribeToMore) {\n    subscribeToMore({\n      document: STATE_SUBSCRIPTION,\n      variables: { workerId: this.state.workerId },\n      updateQuery: (prev, { subscriptionData }) => {\n        // debugger;\n        const res = Object.assign({}, subscriptionData.data);\n        // console.log('Updating worker state to:', res);\n        // this.setState();\n        return res;\n      }\n    })\n  }\n\n  render() {\n    return <span>\n      <Mutation mutation={REGISTER_WORKER_QUERY}>\n        {(registerWorker, { loading, error }) => {\n          if (loading) return <div>Registering worker...</div>;\n          if (error) return <div>Registration error.</div>;\n\n          if (!this.state.isRegistering && !this.state.didRegister) {\n            this.setState({ isRegistering: true });\n            registerWorker({ variables: { name: \"Steffan\" } })\n              .then(({ data }) => {\n                const workerId = data.registerWorker.profile.id;\n                this.setState({ workerId, didRegister: false, isRegistering: true});\n              });\n            return <div>Starting worker registration...</div>;\n          }\n\n          // if (data && !this.state.isRegistering && this.state.didRegister) {\n          //   console.log('workerId', workerId);\n          // }\n\n          return <div>Worker registered!</div>;\n        }}\n      </Mutation>\n\n      {this.state.workerId &&\n        <Query\n        query={STATE_QUERY}\n        variables={{ workerId: this.state.workerId }}\n        >\n\n        {({ loading, error, data, subscribeToMore }) => {\n          if (loading) return <div>Fetching</div>;\n          if (error) return <div>Error</div>;\n\n          if (!this.state.didSubscribe) {\n            this._subscribeToState(subscribeToMore);\n            this.setState({ didSubscribe: true });\n          }\n          // this.setState({ currentState: data.currentState });\n\n          // console.log('Subscribe:', data);\n\n          return <WorkerState workerState={data.workerState} workerId={this.state.workerId} />;\n          // data.currentState\n        }}\n\n        </Query>\n      }\n    </span>;\n  }\n}\n\nexport default WorkerStateData;\n\n// <Query\n//   query={REGISTER_WORKER_QUERY}\n//   variables={{}}\n// >\n// {({ loading, error, data }) => {\n//   if (loading) return <div>Fetching</div>;\n//   if (error) return <div>Error</div>;\n//\n//   if (!this.state.didSubscribe) {\n//     this._subscribeToState(subscribeToMore);\n//     this.setState({ didSubscribe: true });\n//   }\n//   // this.setState({ currentState: data.currentState });\n//\n//   return <div>{JSON.stringify(data.currentState)}</div>;\n//   // data.currentState\n// }}\n//\n// </Query>\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport WorkerState from '../data/worker-state';\n\nclass Dashboard extends React.Component {\n  // componentDidMount() {\n  //   this._subscribeToState();\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n      <Typography variant=\"h4\" className=\"TitleBar\">\n      Worker UI\n      </Typography>\n\n      <WorkerState />\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Dashboard;\n","import * as Package from '../package.json';\n\nrequire(\"dotenv\");\n\nconst {\n  // NODE_ENV = 'test',\n  // PORT = 4000,\n\n  // API_URI = \"http://localhost:4000/\",\n  API_URI = \"https://staging-unsullied-api.herokuapp.com/\",\n  PUBLIC_URL = Package.homepage\n} = process.env;\n\nexport const Config = {\n  API_URI,\n  PUBLIC_URL,\n};\n\nexport default Config;\n","import React from 'react';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'; // v1.x\nimport {\n  AppBar,\n  Button,\n  Drawer,\n  MenuItem,\n  IconButton,\n  Typography,\n  Toolbar,\n} from '@material-ui/core';\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Route, Link } from \"react-router-dom\";\n\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\n\n// App specific imports\nimport ConfigRoute from './routes/Config';\nimport Dashboard from './routes/Dashboard';\nimport WorkerUI from './routes/WorkerUI';\n\nimport Config from './Config';\n\n// import ApolloClient, {createNetworkInterface} from 'apollo-boost';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { createUploadLink } from 'apollo-upload-client';\n\nimport { split } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n// Create WebSocket client\nconst wsLink = new WebSocketLink({\n    uri: Config.API_URI.replace('http', 'ws'),\n    options: {\n      reconnect: true,\n      timeout: 30000,\n      connectionParams: {\n        // Pass any arguments you want for initialization\n      }\n    }\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    console.log(definition.operation);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  createUploadLink({\n    uri: Config.API_URI,\n    options: {\n      path: '/'\n    }\n  }),\n  // httpLink,\n);\nconst cache = new InMemoryCache();\n\n\n// Extend the network interface with the WebSocket\n// const networkInterfaceWithSubscriptions = addGraphQLSubscriptions(\n//     networkInterface,\n//     wsClient\n// );\n\n// Finally, create your ApolloClient instance with the modified network interface\nconst client = new ApolloClient({\n    link: link,\n    cache\n});\n\n// const client = new ApolloClient({\n//   uri: Config.API_URI\n// });\n\nconst baseTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    // Set initial state\n    this.state = {\n      open: false,\n      logged: false,\n      selectedMenuItem: null\n    };\n\n    this.menuItems = {\n      \"Dashboard\": '/',\n      \"Config\": '/config',\n      \"Worker UI\": '/worker-ui',\n    };\n  }\n\n  login = () => {\n    this.setState({ logged: true });\n  }\n\n  logout = () => {\n    this.setState({ logged: false });\n  }\n\n  toggleMenu = () => {\n    this.setState({ open: !this.state.open });\n  }\n\n  closeMenu = () => {\n    this.setState({ open: false });\n  }\n\n  selectMenuItem = (key) => {\n    this.setState({ selectedMenuItem: key });\n    this.closeMenu();\n  }\n\n  createMenu = () => {\n    return Object.entries(this.menuItems).map(([key, value]) => {\n      const LinkComponent = React.forwardRef((props, ref) => <Link innerRef={ref} to={value} {...props}>{key}</Link>);\n      return <MenuItem className=\"MenuItem\" onClick={() => this.selectMenuItem(key)} component={LinkComponent} key={key}>{key}</MenuItem>;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider theme={baseTheme}>\n          <CssBaseline />\n          <ApolloProvider client={client}>\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton edge=\"start\" className=\"MenuIconButton\" color=\"inherit\" aria-label=\"Menu\" onClick={this.toggleMenu}>\n                  <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className=\"TitleBar\">\n                  UnsulliedKnowledge\n                </Typography>\n                {this.state.logged ?  <Button variant=\"contained\" color=\"secondary\" onClick={this.logout}>Logout</Button> : <Button variant=\"contained\" onClick={this.login}>Login</Button>}\n\n              </Toolbar>\n            </AppBar>\n\n            <Drawer open={this.state.open} docked={\"false\"} onBackdropClick={this.toggleMenu}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              {this.createMenu()}\n            </Drawer>\n\n            <Route exact path='/' component={Dashboard}/>\n            <Route path='/config' component={ConfigRoute}/>\n            <Route path='/worker-ui' component={WorkerUI}/>\n          </ApolloProvider>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/unsullied-ui\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}