{"version":3,"sources":["routes/Hello.js","data/users.js","routes/Dashboard.js","Config.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Hello","react_default","a","createElement","Fragment","CssBaseline","Container","maxWidth","Typography","variant","className","Users","react_apollo_esm","query","gql","_templateObject","_ref","loading","error","data","message","allUsers","map","_ref2","id","name","key","Dashboard","users","require","process","API_URI","PUBLIC_URL","Config","Package","client","ApolloClient","uri","baseTheme","createMuiTheme","palette","type","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","login","setState","logged","logout","toggleMenu","open","state","closeMenu","selectMenuItem","selectedMenuItem","createMenu","entries","menuItems","slicedToArray","value","LinkComponent","React","forwardRef","props","ref","react_router_dom","assign","innerRef","to","MenuItem","onClick","component","Home","MuiThemeProvider","theme","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu_default","Button","Drawer","docked","onBackdropClick","src","logo","alt","react_router","exact","path","Component","Boolean","window","location","hostname","match","ReactDOM","render","basename","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"wZAkBeA,MAbf,WACE,OACEC,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,SAAS,MAClBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,YAAnC,gMCPR,IAsBeC,EAtBD,kBACZV,EAAAC,EAAAC,cAACS,EAAA,EAAD,CACEC,MAAOC,IAAFC,MASJ,SAAAC,GAA8B,IAA3BC,EAA2BD,EAA3BC,QAASC,EAAkBF,EAAlBE,MAAOC,EAAWH,EAAXG,KAClB,OAAIF,EAAgBhB,EAAAC,EAAAC,cAAA,uBAChBe,EAAcjB,EAAAC,EAAAC,cAAA,kBAAUe,EAAME,QAAhB,OACXD,EAAKE,SAASC,IAAI,SAAAC,GAAA,IAAGC,EAAHD,EAAGC,GAAIC,EAAPF,EAAOE,KAAP,OACvBxB,EAAAC,EAAAC,cAAA,OAAKuB,IAAKF,GACRvB,EAAAC,EAAAC,cAAA,SAAIqB,EAAJ,KAAUC,SCGLE,MAff,WACE,OACE1B,EAAAC,EAAAC,cAACF,EAAAC,EAAME,SAAP,KACEH,EAAAC,EAAAC,cAACE,EAAA,EAAD,MACAJ,EAAAC,EAAAC,cAACG,EAAA,EAAD,CAAWC,SAAS,MAClBN,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,YAAnC,aAIAT,EAAAC,EAAAC,cAACyB,EAAD,iBCdRC,EAAQ,WASJC,+DAFFC,qBAAU,qDACVC,WAQaC,EALO,CACpBF,UACAC,sBALaE,OCoBTC,EAAS,IAAIC,IAAa,CAC9BC,IAAKJ,EAAOF,UAGRO,EAAYC,YAAe,CAC/BC,QAAS,CACPC,KAAM,UAiFKC,cA5Eb,SAAAA,IAAc,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IACZC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAeFI,MAAQ,WACNP,EAAKQ,SAAS,CAAEC,QAAQ,KAjBZT,EAoBdU,OAAS,WACPV,EAAKQ,SAAS,CAAEC,QAAQ,KArBZT,EAwBdW,WAAa,WACXX,EAAKQ,SAAS,CAAEI,MAAOZ,EAAKa,MAAMD,QAzBtBZ,EA4Bdc,UAAY,WACVd,EAAKQ,SAAS,CAAEI,MAAM,KA7BVZ,EAgCde,eAAiB,SAAChC,GAChBiB,EAAKQ,SAAS,CAAEQ,iBAAkBjC,IAClCiB,EAAKc,aAlCOd,EAqCdiB,WAAa,WACX,OAAOhB,OAAOiB,QAAQlB,EAAKmB,WAAWxC,IAAI,SAAAN,GAAkB,IAAAO,EAAAqB,OAAAmB,EAAA,EAAAnB,CAAA5B,EAAA,GAAhBU,EAAgBH,EAAA,GAAXyC,EAAWzC,EAAA,GACpD0C,EAAgBC,IAAMC,WAAW,SAACC,EAAOC,GAAR,OAAgBpE,EAAAC,EAAAC,cAACmE,EAAA,EAAD1B,OAAA2B,OAAA,CAAMC,SAAUH,EAAKI,GAAIT,GAAWI,GAAQ1C,KACnG,OAAOzB,EAAAC,EAAAC,cAACuE,EAAA,EAAD,CAAUhE,UAAU,WAAWiE,QAAS,kBAAMhC,EAAKe,eAAehC,IAAMkD,UAAWX,GAAgBvC,MApC5GiB,EAAKa,MAAQ,CACXD,MAAM,EACNH,QAAQ,EACRO,iBAAkB,MAGpBhB,EAAKmB,UAAY,CACfe,KAAQ,IACRlD,UAAa,cAZHgB,wEA6CZ,OACE1C,EAAAC,EAAAC,cAAA,OAAKO,UAAU,OACbT,EAAAC,EAAAC,cAAC2E,EAAA,EAAD,CAAkBC,MAAOzC,GACvBrC,EAAAC,EAAAC,cAACS,EAAA,EAAD,CAAgBuB,OAAQA,GACtBlC,EAAAC,EAAAC,cAAC6E,EAAA,EAAD,CAAQC,SAAS,UACfhF,EAAAC,EAAAC,cAAC+E,EAAA,EAAD,KACEjF,EAAAC,EAAAC,cAACgF,EAAA,EAAD,CAAYC,KAAK,QAAQ1E,UAAU,iBAAiB2E,MAAM,UAAUC,aAAW,OAAOX,QAAS7B,KAAKQ,YAClGrD,EAAAC,EAAAC,cAACoF,EAAArF,EAAD,OAEFD,EAAAC,EAAAC,cAACK,EAAA,EAAD,CAAYC,QAAQ,KAAKC,UAAU,YAAnC,aAGCoC,KAAKU,MAAMJ,OAAUnD,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAAQb,QAAS7B,KAAKO,QAAtB,UAAgDpD,EAAAC,EAAAC,cAACqF,EAAA,EAAD,CAAQb,QAAS7B,KAAKI,OAAtB,WAK1EjD,EAAAC,EAAAC,cAACsF,EAAA,EAAD,CAAQlC,KAAMT,KAAKU,MAAMD,KAAMmC,QAAQ,EAAOC,gBAAiB7C,KAAKQ,YAClErD,EAAAC,EAAAC,cAAA,OAAKyF,IAAKC,IAAMnF,UAAU,WAAWoF,IAAI,SACxChD,KAAKc,cAGR3D,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAOC,OAAK,EAACC,KAAK,IAAIrB,UAAW5E,IACjCC,EAAAC,EAAAC,cAAC4F,EAAA,EAAD,CAAOE,KAAK,aAAarB,UAAWjD,cArE9BuC,IAAMgC,WC5BJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OACPxG,EAAAC,EAAAC,cAACmE,EAAA,EAAD,CAAeoC,SAAS,iBACtBzG,EAAAC,EAAAC,cAACwG,EAAD,OAEFC,SAASC,eAAe,SDsHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC,mCEnInBC,EAAAC,QAAiBC,EAAAC,EAAuB","file":"static/js/main.c16e5df7.chunk.js","sourcesContent":["import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nfunction Hello() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <Typography variant=\"h6\" className=\"TitleBar\">\n          Hello!\n        </Typography>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default Hello;\n","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\nconst Users = () => (\n  <Query\n    query={gql`\n      {\n        allUsers {\n          id\n          name\n        }\n      }\n    `}\n  >\n    {({ loading, error, data }) => {\n      if (loading) return <p>Loading...</p>;\n      if (error) return <p>Error {error.message} :(</p>;\n      return data.allUsers.map(({ id, name }) => (\n        <div key={id}>\n          <p>{id}: {name}</p>\n        </div>\n      ));\n    }}\n  </Query>\n);\nexport default Users;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport Users from '../data/users';\n\nfunction Dashboard() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <Typography variant=\"h6\" className=\"TitleBar\">\n          Dashboard\n        </Typography>\n\n        <Users />\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default Dashboard;\n","import * as Package from '../package.json';\n\nrequire(\"dotenv\");\n\nconst {\n  // NODE_ENV = 'test',\n  // PORT = 4000,\n\n  // API_URI = \"http://localhost:4000/\"\n  API_URI = \"https://staging-unsullied-api.herokuapp.com/\",\n  PUBLIC_URL = Package.homepage\n} = process.env;\n\nexport const Config = {\n  API_URI,\n  PUBLIC_URL,\n};\n\nexport default Config;\n","import React from 'react';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'; // v1.x\nimport {\n  AppBar,\n  Button,\n  Drawer,\n  MenuItem,\n  IconButton,\n  Typography,\n  Toolbar,\n} from '@material-ui/core';\n\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Route, Link } from \"react-router-dom\";\n\nimport ApolloClient from \"apollo-boost\";\nimport { ApolloProvider } from \"react-apollo\";\n\n// App specific imports\nimport Hello from './routes/Hello';\nimport Dashboard from './routes/Dashboard';\n\nimport Config from './Config';\n\n\nconst client = new ApolloClient({\n  uri: Config.API_URI\n});\n\nconst baseTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    // Set initial state\n    this.state = {\n      open: false,\n      logged: false,\n      selectedMenuItem: null\n    };\n\n    this.menuItems = {\n      \"Home\": '/',\n      \"Dashboard\": '/dashboard',\n    };\n  }\n\n  login = () => {\n    this.setState({ logged: true });\n  }\n\n  logout = () => {\n    this.setState({ logged: false });\n  }\n\n  toggleMenu = () => {\n    this.setState({ open: !this.state.open });\n  }\n\n  closeMenu = () => {\n    this.setState({ open: false });\n  }\n\n  selectMenuItem = (key) => {\n    this.setState({ selectedMenuItem: key });\n    this.closeMenu();\n  }\n\n  createMenu = () => {\n    return Object.entries(this.menuItems).map(([key, value]) => {\n      const LinkComponent = React.forwardRef((props, ref) => <Link innerRef={ref} to={value} {...props}>{key}</Link>);\n      return <MenuItem className=\"MenuItem\" onClick={() => this.selectMenuItem(key)} component={LinkComponent}>{key}</MenuItem>;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider theme={baseTheme}>\n          <ApolloProvider client={client}>\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton edge=\"start\" className=\"MenuIconButton\" color=\"inherit\" aria-label=\"Menu\" onClick={this.toggleMenu}>\n                  <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className=\"TitleBar\">\n                  Unsullied\n                </Typography>\n                {this.state.logged ?  <Button onClick={this.logout}>Logout</Button> : <Button onClick={this.login}>Login</Button>}\n\n              </Toolbar>\n            </AppBar>\n\n            <Drawer open={this.state.open} docked={false} onBackdropClick={this.toggleMenu}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              {this.createMenu()}\n            </Drawer>\n\n            <Route exact path='/' component={Hello}/>\n            <Route path='/dashboard' component={Dashboard}/>\n          </ApolloProvider>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/unsullied-ui\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}