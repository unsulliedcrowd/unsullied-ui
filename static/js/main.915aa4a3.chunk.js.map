{"version":3,"sources":["routes/Hello.js","data/state.js","routes/Dashboard.js","components/MicroTask.js","components/WorkerState.js","data/worker-state.js","routes/WorkerUI.js","Config.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Hello","react_default","a","createElement","Fragment","CssBaseline","Container","maxWidth","Typography","variant","className","STATE_PROPS_QUERY","STATE_QUERY","gql","_templateObject","STATE_SUBSCRIPTION","_templateObject2","CurrentState","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","didSubscribe","subscribeToMore","document","updateQuery","prev","_ref","subscriptionData","assign","data","_this2","react_apollo_esm","query","variables","_ref2","loading","error","_subscribeToState","setState","JSON","stringify","currentState","React","Component","Dashboard","data_state","subscribeToState","SUBMIT_TASK_MUTATION","MicroTask_templateObject","MicroTask","task","taskString","taskResultString","taskResult","props","client","mutate","mutation","taskType","interfaceType","interfaceParams","resultType","resultParams","Button","color","onClick","submitResult","withApollo","WorkerState","currentTask","components_MicroTask","REGISTER_WORKER_QUERY","worker_state_templateObject","worker_state_templateObject2","_templateObject3","WorkerStateData","isRegistering","didRegister","workerId","workerState","registerWorker","name","then","_ref3","profile","id","_ref4","components_WorkerState","worker_state","require","process","API_URI","PUBLIC_URL","Config","Package","httpLink","HttpLink","uri","options","path","wsLink","WebSocketLink","replace","reconnect","timeout","connectionParams","link","split","definition","getMainDefinition","console","log","operation","kind","cache","InMemoryCache","ApolloClient","baseTheme","createMuiTheme","palette","type","App","login","logged","logout","toggleMenu","open","closeMenu","selectMenuItem","key","selectedMenuItem","createMenu","entries","menuItems","map","slicedToArray","value","LinkComponent","forwardRef","ref","react_router_dom","innerRef","to","MenuItem","component","Home","Worker UI","MuiThemeProvider","theme","AppBar","position","Toolbar","IconButton","edge","aria-label","Menu_default","Drawer","docked","onBackdropClick","src","logo","alt","react_router","exact","WorkerUI","Boolean","window","location","hostname","match","ReactDOM","render","basename","src_App_0","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.915aa4a3.chunk.js","sourcesContent":["import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nfunction Hello() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <Typography variant=\"h6\" className=\"TitleBar\">\n          Hello!\n        </Typography>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default Hello;\n","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst STATE_PROPS_QUERY = `\n{\n  currentTime\n  config {\n    schemaFile\n  }\n\n  crowd {\n    stats {\n      availableWorkersTotal\n    }\n  }\n\n}`;\n\nconst STATE_QUERY = gql`\n  query State {\n    currentState ${STATE_PROPS_QUERY}\n  }\n`;\n\nconst STATE_SUBSCRIPTION = gql`\n  subscription State {\n    currentState ${STATE_PROPS_QUERY}\n  }\n`;\n\nclass CurrentState extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      didSubscribe: false\n    };\n  }\n\n  _subscribeToState(subscribeToMore) {\n    subscribeToMore({\n      document: STATE_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        // debugger;\n        const res = Object.assign({}, prev, subscriptionData.data);\n        // this.setState();\n        return res;\n      }\n    })\n  }\n\n  render() {\n    return <Query\n      query={STATE_QUERY}\n      variables={{}}\n    >\n\n    {({ loading, error, data, subscribeToMore }) => {\n      if (loading) return <div>Fetching</div>;\n      if (error) return <div>Error</div>;\n\n      if (!this.state.didSubscribe) {\n        this._subscribeToState(subscribeToMore);\n        this.setState({ didSubscribe: true });\n      }\n      // this.setState({ currentState: data.currentState });\n\n      return <div>{JSON.stringify(data.currentState)}</div>;\n      // data.currentState\n    }}\n\n    </Query>;\n  }\n}\n\nexport default CurrentState;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport CurrentState from '../data/state';\n\nclass Dashboard extends React.Component {\n  // componentDidMount() {\n  //   this._subscribeToState();\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n      <Typography variant=\"h6\" className=\"TitleBar\">\n      Dashboard\n      </Typography>\n\n      <CurrentState subscribeToState={this._subscribeToState} />\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Dashboard;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\n\nimport { Button } from '@material-ui/core';\nimport { withApollo } from 'react-apollo';\nimport gql from \"graphql-tag\";\n\nconst SUBMIT_TASK_MUTATION = gql`\n  mutation TaskResult($taskString: String!, $taskResultString: String!) {\n    submitTaskResult(taskString: $taskString, taskResultString: $taskResultString) {\n      isSubmitted\n    }\n  }\n`;\n\nclass MicroTask extends React.Component {\n  propTypes =  {\n    client: PropTypes.any,\n    task: PropTypes.any\n  }\n\n  constructor({ task }) {\n    super();\n    // console.log('Making MicroTask:', task);\n    this.state = task;\n  }\n\n  submitResult() {\n    // console.log('Submitting result!');\n    const taskString = JSON.stringify(this.state);\n    const taskResultString = JSON.stringify({ taskResult: \"test2\" });\n    this.props.client.mutate({\n      mutation: SUBMIT_TASK_MUTATION,\n      variables: { taskString, taskResultString },\n    });\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      <Typography variant=\"h6\" className=\"TitleBar\">\n        {this.state.taskType} Task!\n      </Typography>\n\n      {this.state.interfaceType === \"QUESTION\" && <div>Question interface: {JSON.stringify(this.state.interfaceParams)}.</div>}\n      {this.state.resultType === \"LABEL\" && <div>Label result: {JSON.stringify(this.state.resultParams)}.</div>}\n\n      <Button color=\"primary\" variant=\"contained\" onClick={() => this.submitResult()}>Submit result!</Button>\n\n      </React.Fragment>\n    );\n  }\n}\n\nexport default withApollo(MicroTask);\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport PropTypes from 'prop-types';\n\nimport MicroTask from '../components/MicroTask';\n\nclass WorkerState extends React.Component {\n  propTypes =  {\n    state: PropTypes.any\n  }\n\n  constructor({ state }) {\n    super();\n    // console.log('Making WorkerState:', state);\n    this.state = state;\n  }\n\n  render() {\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      WorkerState: {JSON.stringify(this.state)}\n      {this.state.currentTask && <MicroTask task={this.state.currentTask} />}\n      </React.Fragment>\n    );\n  }\n}\n\nexport default WorkerState;\n","import React from 'react';\nimport { Query, Mutation } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nimport WorkerState from '../components/WorkerState';\n\nconst STATE_PROPS_QUERY = `\n{\n  isOnline\n  currentTask {\n    taskType\n    taskParams\n    interfaceType\n    interfaceParams\n    resultType\n    resultParams\n  }\n}`;\n\nconst REGISTER_WORKER_QUERY = gql`\n  mutation Worker($name: String!) {\n    registerWorker(name: $name) {\n      profile {\n        id\n      }\n    }\n  }\n`;\n\nconst STATE_QUERY = gql`\n  query WorkerState($workerId: ID!) {\n    workerState(workerId: $workerId) ${STATE_PROPS_QUERY}\n  }\n`;\n\nconst STATE_SUBSCRIPTION = gql`\n  subscription WorkerState($workerId: ID!) {\n    workerState(workerId: $workerId) ${STATE_PROPS_QUERY}\n  }\n`;\n\nclass WorkerStateData extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      didSubscribe: false,\n      isRegistering: false,\n      didRegister: false,\n      workerId: null\n    };\n  }\n\n  _subscribeToState(subscribeToMore) {\n    subscribeToMore({\n      document: STATE_SUBSCRIPTION,\n      variables: { workerId: this.state.workerId },\n      updateQuery: (prev, { subscriptionData }) => {\n        // debugger;\n        const res = Object.assign({}, prev, { workerState: subscriptionData.data.currentState });\n        // this.setState();\n        return res;\n      }\n    })\n  }\n\n  render() {\n    return <span>\n      <Mutation mutation={REGISTER_WORKER_QUERY}>\n        {(registerWorker, { loading, error }) => {\n          if (loading) return <div>Registering worker...</div>;\n          if (error) return <div>Registration error.</div>;\n\n          if (!this.state.isRegistering && !this.state.didRegister) {\n            this.setState({ isRegistering: true });\n            registerWorker({ variables: { name: \"Steffan\" } })\n              .then(({ data }) => {\n                const workerId = data.registerWorker.profile.id;\n                this.setState({ workerId, didRegister: false, isRegistering: true});\n              });\n            return <div>Starting worker registration...</div>;\n          }\n\n          // if (data && !this.state.isRegistering && this.state.didRegister) {\n          //   console.log('workerId', workerId);\n          // }\n\n          return <div>Worker registered!</div>;\n        }}\n      </Mutation>\n\n      {this.state.workerId &&\n        <Query\n        query={STATE_QUERY}\n        variables={{ workerId: this.state.workerId }}\n        >\n\n        {({ loading, error, data, subscribeToMore }) => {\n          if (loading) return <div>Fetching</div>;\n          if (error) return <div>Error</div>;\n\n          if (!this.state.didSubscribe) {\n            this._subscribeToState(subscribeToMore);\n            this.setState({ didSubscribe: true });\n          }\n          // this.setState({ currentState: data.currentState });\n\n          // console.log('Subscribe:', data);\n\n          return <WorkerState state={data.workerState} />;\n          // data.currentState\n        }}\n\n        </Query>\n      }\n\n    </span>;\n  }\n}\n\nexport default WorkerStateData;\n\n// <Query\n//   query={REGISTER_WORKER_QUERY}\n//   variables={{}}\n// >\n// {({ loading, error, data }) => {\n//   if (loading) return <div>Fetching</div>;\n//   if (error) return <div>Error</div>;\n//\n//   if (!this.state.didSubscribe) {\n//     this._subscribeToState(subscribeToMore);\n//     this.setState({ didSubscribe: true });\n//   }\n//   // this.setState({ currentState: data.currentState });\n//\n//   return <div>{JSON.stringify(data.currentState)}</div>;\n//   // data.currentState\n// }}\n//\n// </Query>\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport WorkerState from '../data/worker-state';\n\nclass Dashboard extends React.Component {\n  // componentDidMount() {\n  //   this._subscribeToState();\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n      <Typography variant=\"h6\" className=\"TitleBar\">\n      Worker UI\n      </Typography>\n\n      <WorkerState subscribeToState={this._subscribeToState} />\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Dashboard;\n","import * as Package from '../package.json';\n\nrequire(\"dotenv\");\n\nconst {\n  // NODE_ENV = 'test',\n  // PORT = 4000,\n\n  // API_URI = \"http://localhost:4000/\",\n  API_URI = \"https://staging-unsullied-api.herokuapp.com/\",\n  PUBLIC_URL = Package.homepage\n} = process.env;\n\nexport const Config = {\n  API_URI,\n  PUBLIC_URL,\n};\n\nexport default Config;\n","import React from 'react';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'; // v1.x\nimport {\n  AppBar,\n  Button,\n  Drawer,\n  MenuItem,\n  IconButton,\n  Typography,\n  Toolbar,\n} from '@material-ui/core';\n\nimport MenuIcon from '@material-ui/icons/Menu';\nimport CssBaseline from '@material-ui/core/CssBaseline';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Route, Link } from \"react-router-dom\";\n\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\n\n// App specific imports\nimport Hello from './routes/Hello';\nimport Dashboard from './routes/Dashboard';\nimport WorkerUI from './routes/WorkerUI';\n\nimport Config from './Config';\n\n// import ApolloClient, {createNetworkInterface} from 'apollo-boost';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { split } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n// Create regular NetworkInterface by using apollo-client's API:\nconst httpLink = new HttpLink({\n  uri: Config.API_URI,\n  options: {\n    path: '/'\n  }\n});\n\n// Create WebSocket client\nconst wsLink = new WebSocketLink({\n    uri: Config.API_URI.replace('http', 'ws'),\n    options: {\n      reconnect: true,\n      timeout: 30000,\n      connectionParams: {\n        // Pass any arguments you want for initialization\n      }\n    }\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    console.log(definition.operation);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\nconst cache = new InMemoryCache();\n\n\n// Extend the network interface with the WebSocket\n// const networkInterfaceWithSubscriptions = addGraphQLSubscriptions(\n//     networkInterface,\n//     wsClient\n// );\n\n// Finally, create your ApolloClient instance with the modified network interface\nconst client = new ApolloClient({\n    link: link,\n    cache\n});\n\n// const client = new ApolloClient({\n//   uri: Config.API_URI\n// });\n\nconst baseTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    // Set initial state\n    this.state = {\n      open: false,\n      logged: false,\n      selectedMenuItem: null\n    };\n\n    this.menuItems = {\n      \"Home\": '/',\n      \"Dashboard\": '/dashboard',\n      \"Worker UI\": '/worker-ui',\n    };\n  }\n\n  login = () => {\n    this.setState({ logged: true });\n  }\n\n  logout = () => {\n    this.setState({ logged: false });\n  }\n\n  toggleMenu = () => {\n    this.setState({ open: !this.state.open });\n  }\n\n  closeMenu = () => {\n    this.setState({ open: false });\n  }\n\n  selectMenuItem = (key) => {\n    this.setState({ selectedMenuItem: key });\n    this.closeMenu();\n  }\n\n  createMenu = () => {\n    return Object.entries(this.menuItems).map(([key, value]) => {\n      const LinkComponent = React.forwardRef((props, ref) => <Link innerRef={ref} to={value} {...props}>{key}</Link>);\n      return <MenuItem className=\"MenuItem\" onClick={() => this.selectMenuItem(key)} component={LinkComponent} key={key}>{key}</MenuItem>;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider theme={baseTheme}>\n          <CssBaseline />\n          <ApolloProvider client={client}>\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton edge=\"start\" className=\"MenuIconButton\" color=\"inherit\" aria-label=\"Menu\" onClick={this.toggleMenu}>\n                  <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className=\"TitleBar\">\n                  Unsullied\n                </Typography>\n                {this.state.logged ?  <Button variant=\"contained\" color=\"secondary\" onClick={this.logout}>Logout</Button> : <Button variant=\"contained\" onClick={this.login}>Login</Button>}\n\n              </Toolbar>\n            </AppBar>\n\n            <Drawer open={this.state.open} docked={\"false\"} onBackdropClick={this.toggleMenu}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              {this.createMenu()}\n            </Drawer>\n\n            <Route exact path='/' component={Hello}/>\n            <Route path='/dashboard' component={Dashboard}/>\n            <Route path='/worker-ui' component={WorkerUI}/>\n          </ApolloProvider>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/unsullied-ui\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}