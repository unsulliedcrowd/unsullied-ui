{"version":3,"sources":["routes/Hello.js","data/state.js","routes/Dashboard.js","Config.js","App.js","serviceWorker.js","index.js","logo.svg"],"names":["Hello","react_default","a","createElement","Fragment","CssBaseline","Container","maxWidth","Typography","variant","className","STATE_PROPS_QUERY","STATE_QUERY","gql","_templateObject","STATE_SUBSCRIPTION","_templateObject2","CurrentState","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","didSubscribe","subscribeToMore","document","updateQuery","prev","_ref","subscriptionData","assign","data","_this2","react_apollo_esm","query","variables","_ref2","loading","error","_subscribeToState","setState","JSON","stringify","currentState","React","Component","Dashboard","subscribeToState","require","process","API_URI","PUBLIC_URL","Config","Package","httpLink","HttpLink","uri","options","path","wsLink","WebSocketLink","replace","reconnect","timeout","connectionParams","link","split","definition","getMainDefinition","console","log","operation","kind","cache","InMemoryCache","client","ApolloClient","baseTheme","createMuiTheme","palette","type","App","login","logged","logout","toggleMenu","open","closeMenu","selectMenuItem","key","selectedMenuItem","createMenu","entries","menuItems","map","_ref3","slicedToArray","value","LinkComponent","forwardRef","props","ref","react_router_dom","innerRef","to","MenuItem","onClick","component","Home","MuiThemeProvider","theme","AppBar","position","Toolbar","IconButton","edge","color","aria-label","Menu_default","Button","Drawer","docked","onBackdropClick","src","logo","alt","react_router","exact","Boolean","window","location","hostname","match","ReactDOM","render","basename","src_App_0","getElementById","navigator","serviceWorker","ready","then","registration","unregister","module","exports","__webpack_require__","p"],"mappings":"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","file":"static/js/main.78278f38.chunk.js","sourcesContent":["import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nfunction Hello() {\n  return (\n    <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n        <Typography variant=\"h6\" className=\"TitleBar\">\n          Hello!\n        </Typography>\n      </Container>\n    </React.Fragment>\n  );\n}\n\nexport default Hello;\n","import React from 'react';\nimport { Query } from \"react-apollo\";\nimport gql from \"graphql-tag\";\n\nconst STATE_PROPS_QUERY = `\n{\n  currentTime\n  config {\n    schemaFile\n  }\n\n  crowd {\n    stats {\n      availableWorkersTotal\n    }\n  }\n\n}`;\n\nconst STATE_QUERY = gql`\n  query State {\n    currentState ${STATE_PROPS_QUERY}\n  }\n`;\n\nconst STATE_SUBSCRIPTION = gql`\n  subscription State {\n    currentState ${STATE_PROPS_QUERY}\n  }\n`;\n\nclass CurrentState extends React.Component {\n  constructor() {\n    super();\n    this.state = {\n      didSubscribe: false\n    };\n  }\n\n  _subscribeToState(subscribeToMore) {\n    subscribeToMore({\n      document: STATE_SUBSCRIPTION,\n      updateQuery: (prev, { subscriptionData }) => {\n        // debugger;\n        const res = Object.assign({}, prev, subscriptionData.data);\n        // this.setState();\n        return res;\n      }\n    })\n  }\n\n  render() {\n    return <Query\n      query={STATE_QUERY}\n      variables={{}}\n    >\n\n    {({ loading, error, data, subscribeToMore }) => {\n      if (loading) return <div>Fetching</div>;\n      if (error) return <div>Error</div>;\n\n      if (!this.state.didSubscribe) {\n        this._subscribeToState(subscribeToMore);\n        this.setState({ didSubscribe: true });\n      }\n      // this.setState({ currentState: data.currentState });\n\n      return <div>{JSON.stringify(data.currentState)}</div>;\n      // data.currentState\n    }}\n\n    </Query>;\n  }\n}\n\nexport default CurrentState;\n","import React from 'react';\nimport CssBaseline from '@material-ui/core/CssBaseline';\nimport Typography from '@material-ui/core/Typography';\nimport Container from '@material-ui/core/Container';\n\nimport CurrentState from '../data/state';\n\nclass Dashboard extends React.Component {\n  // componentDidMount() {\n  //   this._subscribeToState();\n  // }\n\n  render() {\n    return (\n      <React.Fragment>\n      <CssBaseline />\n      <Container maxWidth=\"md\">\n      <Typography variant=\"h6\" className=\"TitleBar\">\n      Dashboard\n      </Typography>\n\n      <CurrentState subscribeToState={this._subscribeToState} />\n      </Container>\n      </React.Fragment>\n    );\n  }\n}\n\nexport default Dashboard;\n","import * as Package from '../package.json';\n\nrequire(\"dotenv\");\n\nconst {\n  // NODE_ENV = 'test',\n  // PORT = 4000,\n\n  // API_URI = \"http://localhost:4000/\",\n  API_URI = \"https://staging-unsullied-api.herokuapp.com/\",\n  PUBLIC_URL = Package.homepage\n} = process.env;\n\nexport const Config = {\n  API_URI,\n  PUBLIC_URL,\n};\n\nexport default Config;\n","import React from 'react';\n\nimport { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles'; // v1.x\nimport {\n  AppBar,\n  Button,\n  Drawer,\n  MenuItem,\n  IconButton,\n  Typography,\n  Toolbar,\n} from '@material-ui/core';\n\nimport MenuIcon from '@material-ui/icons/Menu';\n\nimport logo from './logo.svg';\nimport './App.css';\n\nimport { Route, Link } from \"react-router-dom\";\n\nimport ApolloClient from \"apollo-client\";\nimport { ApolloProvider } from \"react-apollo\";\n\n// App specific imports\nimport Hello from './routes/Hello';\nimport Dashboard from './routes/Dashboard';\n\nimport Config from './Config';\n\n// import ApolloClient, {createNetworkInterface} from 'apollo-boost';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { split } from 'apollo-link';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { InMemoryCache } from 'apollo-cache-inmemory';\n\n// Create regular NetworkInterface by using apollo-client's API:\nconst httpLink = new HttpLink({\n  uri: Config.API_URI,\n  options: {\n    path: '/'\n  }\n});\n\n// Create WebSocket client\nconst wsLink = new WebSocketLink({\n    uri: Config.API_URI.replace('http', 'ws'),\n    options: {\n      reconnect: true,\n      timeout: 30000,\n      connectionParams: {\n        // Pass any arguments you want for initialization\n      }\n    }\n});\n\nconst link = split(\n  // split based on operation type\n  ({ query }) => {\n    const definition = getMainDefinition(query);\n    console.log(definition.operation);\n    return (\n      definition.kind === 'OperationDefinition' &&\n      definition.operation === 'subscription'\n    );\n  },\n  wsLink,\n  httpLink,\n);\nconst cache = new InMemoryCache();\n\n\n// Extend the network interface with the WebSocket\n// const networkInterfaceWithSubscriptions = addGraphQLSubscriptions(\n//     networkInterface,\n//     wsClient\n// );\n\n// Finally, create your ApolloClient instance with the modified network interface\nconst client = new ApolloClient({\n    link: link,\n    cache\n});\n\n// const client = new ApolloClient({\n//   uri: Config.API_URI\n// });\n\nconst baseTheme = createMuiTheme({\n  palette: {\n    type: 'dark',\n  },\n});\n\nclass App extends React.Component {\n  constructor() {\n    super();\n\n    // Set initial state\n    this.state = {\n      open: false,\n      logged: false,\n      selectedMenuItem: null\n    };\n\n    this.menuItems = {\n      \"Home\": '/',\n      \"Dashboard\": '/dashboard',\n    };\n  }\n\n  login = () => {\n    this.setState({ logged: true });\n  }\n\n  logout = () => {\n    this.setState({ logged: false });\n  }\n\n  toggleMenu = () => {\n    this.setState({ open: !this.state.open });\n  }\n\n  closeMenu = () => {\n    this.setState({ open: false });\n  }\n\n  selectMenuItem = (key) => {\n    this.setState({ selectedMenuItem: key });\n    this.closeMenu();\n  }\n\n  createMenu = () => {\n    return Object.entries(this.menuItems).map(([key, value]) => {\n      const LinkComponent = React.forwardRef((props, ref) => <Link innerRef={ref} to={value} {...props}>{key}</Link>);\n      return <MenuItem className=\"MenuItem\" onClick={() => this.selectMenuItem(key)} component={LinkComponent} key={key}>{key}</MenuItem>;\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <MuiThemeProvider theme={baseTheme}>\n          <ApolloProvider client={client}>\n            <AppBar position=\"static\">\n              <Toolbar>\n                <IconButton edge=\"start\" className=\"MenuIconButton\" color=\"inherit\" aria-label=\"Menu\" onClick={this.toggleMenu}>\n                  <MenuIcon />\n                </IconButton>\n                <Typography variant=\"h6\" className=\"TitleBar\">\n                  Unsullied\n                </Typography>\n                {this.state.logged ?  <Button onClick={this.logout}>Logout</Button> : <Button onClick={this.login}>Login</Button>}\n\n              </Toolbar>\n            </AppBar>\n\n            <Drawer open={this.state.open} docked={false} onBackdropClick={this.toggleMenu}>\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              {this.createMenu()}\n            </Drawer>\n\n            <Route exact path='/' component={Hello}/>\n            <Route path='/dashboard' component={Dashboard}/>\n          </ApolloProvider>\n        </MuiThemeProvider>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { BrowserRouter } from \"react-router-dom\";\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <BrowserRouter basename=\"/unsullied-ui\">\n    <App />\n  </BrowserRouter>,\n  document.getElementById('root')\n);\n\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}